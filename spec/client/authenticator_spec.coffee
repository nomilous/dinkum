{_authenticator, Authenticator} = require '../../lib/client/authenticator'
{Requestor} = require '../../lib/client/requestor'
HttpRequest = require '../../lib/client/http_request'
should = require 'should'
sequence = require 'when/sequence'

describe 'Authenticator', ->

    before -> 
        @config = 
            authenticator: 
                module: 'basic_auth_session'
                username: 'user'
                password: 'pass'

    beforeEach -> 
        @requeued = []
        @queue = 
            suspend: false
            requeue: (object) => 
                @requeued.push object
                then: (resolve, reject, notify) -> resolve()


    context 'first call to startSessionAuth()', -> 


        it 'rejects the request promise if no authentication scheme is specified', (done) -> 

            instance = Authenticator()
            instance.startSessionAuth promised: reject: (error) -> 

                error.should.match /dinkum absence of authenticator scheme/

                done()


        it 'can use node_module (plugin) as authenticator scheme'

        it 'sets authenticating to the sequence number of the first request', (done) -> 

            instance = Authenticator @config, @queue
            _authenticator().authenticating.should.equal 0
            instance.startSessionAuth sequence: 1, opts: {}
            _authenticator().authenticating.should.equal 1
            done()


        it 'resolves with an authentication request generated by the schema', (done) ->

            instance = Authenticator @config, @queue
            _authenticator().scheme = startSessionAuth: (action, forbiddenRequest) ->

                    action.resolve 'AUTH REQUEST'

            instance.startSessionAuth( sequence: 1, opts: {} ).then (request) -> 

                request.should.equal 'AUTH REQUEST'
                done()


        it 'suspends the queue', (done) -> 

            instance = Authenticator @config, @queue
            instance.startSessionAuth( sequence: 1, opts: {} ).then (request) => 

                @queue.suspend.should.equal true
                done()

        it 'does not requeue the first request that requires authentication', (done) -> 

            instance = Authenticator @config, @queue
            instance.startSessionAuth( sequence: 1, opts: {} ).then (request) => 

                @requeued.should.eql []
                done()


        it 'attaches auth to request', (done) -> 

            instance = Authenticator @config, @queue
            instance.startSessionAuth( sequence: 1, opts: {} ).then (request) => 

                request.opts.auth.should.equal 'user:pass'
                done()


    context 'subsequent calls to startSessionAuth()', -> 

        #
        # a client that starts up with several requests in parallel
        # will receive several 401s if auth is required,
        # 
        # this authenticator directs only the first 401 through an
        # authentication sequence, subsequent requests are requeued
        # pending the authentication completion
        #

        it 'requeues request that require authentication while authentication is in progress', (done) -> 

            instance = Authenticator @config, @queue
            sequence([
                -> instance.startSessionAuth sequence: 1, opts: {}
                -> instance.startSessionAuth sequence: 2, opts: {}
                -> instance.startSessionAuth sequence: 3, opts: {}

            ]).then => 

                @requeued.should.eql [
                    { sequence: 2, opts: {} }
                    { sequence: 3, opts: {} }
                ]
                done()


    context 'endSessionAuth()', -> 

        it 'calls the authentication scheme endSessionAuth', (done) -> 

            instance = Authenticator @config, @queue

            _authenticator().scheme.endSessionAuth = (action, authRequest, authResult) ->

                authRequest.sequence.should.equal 1
                authResult.body.should.equal 'AUTH_RESULT'
                done() 


            instance.endSessionAuth( 
                { sequence: 1, opts: {} }
                { body: 'AUTH_RESULT' }
            )


        it 'resumes the queue'



    context 'integrations', -> 

        it 'is assigned the queue via enclosed config-chain requestor..transport..', (done) -> 

            requestor = Requestor()
            should.exist _authenticator().queue
            done()

        it 'is assigned the cookie store via enclosed config-chain requestor..transport..', (done) -> 

            requestor = Requestor()
            should.exist _authenticator().cookies
            done()

