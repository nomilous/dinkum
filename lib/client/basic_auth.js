// Generated by CoffeeScript 1.6.3
var CookieStore, defer, https;

https = require('https');

defer = require('when').defer;

CookieStore = require('./cookie_store');

exports.create = function(config) {
  var authenticating, queue, sequence, session;
  if (!((config != null) && (config.username != null) && (config.password != null) && (config.hostname != null))) {
    throw new Error('BasicAuth.create(config) requires config.username, config.password, config.hostname');
  }
  config.port || (config.port = 443);
  config.dequeueLimit || (config.dequeueLimit = 10);
  queue = {};
  authenticating = 0;
  sequence = 0;
  return session = {
    cookies: CookieStore.create({
      hostname: config.username
    }),
    get: function(opts, promise) {
      var cookie, request;
      if (opts == null) {
        opts = {};
      }
      if (promise == null) {
        promise = defer();
      }
      promise.sequence || (promise.sequence = ++sequence);
      if (authenticating && promise.sequence !== authenticating) {
        queue[sequence.toString()] = {
          opts: opts,
          promise: promise
        };
        return promise.promise;
      }
      opts.method = 'GET';
      opts.path = '/';
      opts.headers || (opts.headers = {});
      cookie = session.cookies.getCookie();
      if (cookie != null) {
        opts.headers.cookie = cookie;
      }
      request = https.request({
        hostname: config.hostname,
        port: config.port,
        path: opts.path,
        auth: authenticating === promise.sequence ? opts.auth : void 0,
        method: opts.method,
        headers: opts.headers
      }, function(response) {
        var count, seq;
        if (response.statusCode === 401) {
          if (authenticating) {
            if (authenticating === promise.sequence) {
              authenticating = 0;
              promise.reject(new Error('Authentication Failed'));
              return;
            } else {
              console.log({
                QUEUE_AFTER: opts
              });
              queue[sequence.toString()] = {
                opts: opts,
                promise: promise
              };
              return;
            }
          }
          authenticating = promise.sequence;
          opts.auth = "" + config.username + ":" + config.password;
          session.get(opts, promise);
          return;
        } else {
          if (promise.sequence === authenticating) {
            authenticating = 0;
            count = 1;
            for (seq in queue) {
              if (++count > config.dequeueLimit) {
                break;
              }
              session.get(queue[seq].opts, queue[seq].promise);
            }
          }
        }
        return response.on('end', function() {
          return promise.resolve({});
        });
      });
      return promise.promise;
    }
  };
};
