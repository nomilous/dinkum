// Generated by CoffeeScript 1.6.3
var CookieStore, HttpRequest, Queue, Transport, deferred, enclose, parallel, sequence, testable, _ref;

_ref = require('also'), enclose = _ref.enclose, deferred = _ref.deferred;

Queue = require('./queue').Queue;

Transport = require('./transport').Transport;

HttpRequest = require('./http_request');

CookieStore = require('./cookie_store');

sequence = require('when/sequence');

parallel = require('when/parallel');

testable = void 0;

exports._requestor = function() {
  return testable;
};

exports.Requestor = enclose(Queue, function(queue, config) {
  var api, cookies, requestor;
  if (config == null) {
    config = {};
  }
  cookies = CookieStore.create(config);
  requestor = {
    queue: queue,
    transport: Transport(config, queue, cookies),
    request: deferred(function(action, opts, promised) {
      var notify, reject, resolve;
      resolve = action.resolve, reject = action.reject, notify = action.notify;
      return sequence([
        function() {
          return queue.enqueue(new HttpRequest(promised, opts));
        }, function() {
          return queue.dequeue();
        }
      ]).then(function(_arg) {
        var NULL, httpRequest, requests;
        NULL = _arg[0], requests = _arg[1];
        return parallel((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = requests.length; _i < _len; _i++) {
            httpRequest = requests[_i];
            _results.push((function(httpRequest) {
              return function() {
                return requestor.transport.request(httpRequest);
              };
            })(httpRequest));
          }
          return _results;
        })()).then(resolve, reject, notify);
      }, reject, notify);
    }),
    doNext: deferred(function(action) {
      var notify, reject, resolve;
      resolve = action.resolve, reject = action.reject, notify = action.notify;
      return sequence([
        function() {
          return queue.dequeue();
        }
      ]).then(function(_arg) {
        var httpRequest, requests;
        requests = _arg[0];
        return parallel((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = requests.length; _i < _len; _i++) {
            httpRequest = requests[_i];
            _results.push((function(httpRequest) {
              return function() {
                return requestor.transport.request(httpRequest);
              };
            })(httpRequest));
          }
          return _results;
        })()).then(resolve, reject, notify);
      }, reject, notify);
    }),
    stats: deferred(function(action) {
      var notify, reject, resolve;
      resolve = action.resolve, reject = action.reject, notify = action.notify;
      return queue.stats().then(resolve, reject, notify);
    })
  };
  queue.on('object::done', requestor.doNext);
  testable = requestor;
  return api = {
    request: requestor.request,
    stats: requestor.stats
  };
});
