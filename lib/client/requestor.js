// Generated by CoffeeScript 1.6.3
var HttpRequest, count, deferred, extend, parallel, queue, requestor, sequence, transport, _ref;

_ref = require('../support'), extend = _ref.extend, deferred = _ref.deferred;

queue = require('./queue').queue;

transport = require('./transport').transport;

HttpRequest = require('./http_request');

sequence = require('when/sequence');

parallel = require('when/parallel');

count = 0;

requestor = void 0;

exports.testable = function() {
  return requestor;
};

exports.requestor = extend(queue, function(superclass, config) {
  var api;
  if (config == null) {
    config = {};
  }
  requestor = {
    superclass: superclass,
    transport: transport(config),
    request: deferred(function(action, opts, promised) {
      var notify, reject, resolve;
      resolve = action.resolve, reject = action.reject, notify = action.notify;
      return sequence([
        function() {
          return superclass.enqueue(new HttpRequest(promised, opts));
        }, function() {
          return superclass.dequeue();
        }
      ]).then(function(_arg) {
        var NULL, httpRequest, requests;
        NULL = _arg[0], requests = _arg[1];
        return parallel((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = requests.length; _i < _len; _i++) {
            httpRequest = requests[_i];
            _results.push((function(request) {
              return function() {
                return requestor.transport.request(httpRequest);
              };
            })(request));
          }
          return _results;
        })()).then(resolve, reject, notify);
      }, reject, notify);
    })
  };
  return api = {
    request: requestor.request
  };
});
