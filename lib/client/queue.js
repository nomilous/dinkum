// Generated by CoffeeScript 1.6.3
var extend, promised, queue, _ref;

_ref = require('../support'), extend = _ref.extend, promised = _ref.promised;

queue = void 0;

exports.testable = function() {
  return queue;
};

exports.queue = function(config) {
  var api;
  if (config == null) {
    config = {};
  }
  if (config.queueLimit == null) {
    config.queueLimit = 100;
  }
  queue = {
    sequence: 0,
    pending: {
      count: 0,
      items: {}
    },
    active: {
      count: 0,
      items: {}
    },
    enqueue: promised(function(action, object) {
      if (queue.pending.count === config.queueLimit) {
        return action.reject(new Error('dinkum queue overflow'));
      }
      queue.pending.items[(++queue.sequence).toString()] = {
        object: object
      };
      queue.pending.count++;
      return action.resolve();
    }),
    dequeue: promised(function(action) {
      var seq, _results;
      _results = [];
      for (seq in queue.pending.items) {
        queue.active.items[seq] = queue.pending.items[seq];
        delete queue.pending.items[seq];
        queue.active.count++;
        queue.pending.count--;
        action.resolve([queue.active.items[seq]]);
        break;
      }
      return _results;
    })
  };
  return api = {
    enqueue: queue.enqueue,
    dequeue: queue.dequeue
  };
};
