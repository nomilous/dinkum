// Generated by CoffeeScript 1.6.3
var HttpRequest, deferred, testable;

deferred = require('../support').deferred;

HttpRequest = require('./http_request');

testable = void 0;

exports._authenticator = function() {
  return testable;
};

exports.Authenticator = function(config, queue) {
  var api, authenticator;
  config || (config = {});
  authenticator = {
    queue: queue,
    authenticating: 0,
    scheme: void 0,
    assign: function() {
      var error, modulePath;
      if (config.authenticator.module == null) {
        return false;
      }
      if (authenticator.scheme != null) {
        return true;
      }
      try {
        modulePath = "" + config.authenticator.module;
        authenticator.scheme = require(modulePath)(config);
      } catch (_error) {
        error = _error;
        try {
          modulePath = "./authenticators/" + config.authenticator.module;
          authenticator.scheme = require(modulePath)(config);
        } catch (_error) {}
      }
      return authenticator.scheme != null;
    },
    configured: function() {
      return (config.authenticator != null) && authenticator.assign();
    },
    authenticate: deferred(function(action, httpRequest) {
      var error, newAuthRequest, notify, reject, resolve;
      resolve = action.resolve, reject = action.reject, notify = action.notify;
      if (!authenticator.configured()) {
        error = new Error('dinkum absence of authenticator scheme');
        error.detail = httpRequest.opts;
        httpRequest.promised.reject(error);
        action.reject();
        return;
      }
      if (authenticator.authenticating === 0) {
        queue.suspend = true;
        authenticator.authenticating = httpRequest.sequence;
        return action.resolve(new HttpRequest);
      } else {
        queue.requeue(httpRequest).then(resolve, reject, notify);
        newAuthRequest = null;
        return action.resolve(newAuthRequest);
      }
    })
  };
  testable = authenticator;
  return api = {
    authenticate: authenticator.authenticate
  };
};
