// Generated by CoffeeScript 1.6.3
var RequestFilter, Requestor, defer, deferred, enclose, testable, _ref;

_ref = require('also'), enclose = _ref.enclose, deferred = _ref.deferred;

RequestFilter = require('../support').RequestFilter;

defer = require('when').defer;

Requestor = require('./requestor').Requestor;

testable = void 0;

exports._client = function() {
  return testable;
};

exports.Client = enclose(Requestor, function(requestor, config) {
  var api, client;
  if (config == null) {
    config = {};
  }
  client = {
    requestor: requestor,
    get: RequestFilter(config, function(opts, result) {
      if (result == null) {
        result = defer();
      }
      opts.method = 'GET';
      requestor.request(opts, result).then(function() {}, result.error, result.notify);
      return result.promise;
    }),
    post: RequestFilter(config, function(opts, result) {
      if (result == null) {
        result = defer();
      }
      opts.method = 'POST';
      requestor.request(opts, result).then(function() {}, result.error, result.notify);
      return result.promise;
    }),
    put: RequestFilter(config, function(opts, result) {
      if (result == null) {
        result = defer();
      }
      opts.method = 'PUT';
      requestor.request(opts, result).then(function() {}, result.error, result.notify);
      return result.promise;
    }),
    "delete": RequestFilter(config, function(opts, result) {
      if (result == null) {
        result = defer();
      }
      opts.method = 'DELETE';
      requestor.request(opts, result).then(function() {}, result.error, result.notify);
      return result.promise;
    }),
    stats: deferred(function(action, opts, callback) {
      var notify, reject, resolve;
      resolve = action.resolve, reject = action.reject, notify = action.notify;
      return requestor.stats().then(function(stats) {
        if (callback != null) {
          callback(null, stats);
        }
        return resolve(stats);
      }, function(error) {
        if (callback != null) {
          callback(error);
        }
        return reject(error);
      }, notify);
    }),
    errors: function(opts, callback) {
      var flag, next, prev;
      next = function(opts, callback) {};
      prev = function(opts, callback) {};
      flag = function(opts, callback) {};
      next.$$notice = {};
      prev.$$notice = {};
      flag.$$notice = {};
      return callback(null, {
        count: 0,
        next: next,
        prev: prev,
        flag: flag
      });
    }
  };
  client.stats.$$notice = {};
  client.errors.$$notice = {};
  testable = client;
  return api = {
    get: client.get,
    post: client.post,
    put: client.put,
    "delete": client["delete"],
    stats: client.stats,
    errors: client.errors
  };
});
